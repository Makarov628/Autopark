using Autopark.DataGenerator.Models;
using Autopark.DataGenerator.Services;
using CommandLine;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Autopark.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;

namespace Autopark.DataGenerator;

class Program
{
    static async Task<int> Main(string[] args)
    {
        return await Parser.Default.ParseArguments<GeneratorOptions>(args)
            .MapResult(
                async (GeneratorOptions opts) =>
                {
                    try
                    {
                        await RunGenerator(opts);
                        return 0;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
                        return 1;
                    }
                },
                errors => Task.FromResult(1)
            );
    }

    static async Task RunGenerator(GeneratorOptions options)
    {
        Console.WriteLine("üöó –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Autopark");
        Console.WriteLine("========================================");
        Console.WriteLine($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π: {options.EnterpriseCount}");
        Console.WriteLine($"–ú–∞—à–∏–Ω –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {options.VehiclesPerEnterprise}");
        Console.WriteLine($"–î–æ–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {options.DriversRatio:P0}");
        Console.WriteLine($"–î–æ–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {options.ActiveDriversRatio:P0}");
        Console.WriteLine($"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {options.AdditionalUsers}");
        Console.WriteLine($"Seed: {options.Seed}");
        Console.WriteLine($"–§–∞–π–ª –≤—ã–≤–æ–¥–∞: {options.OutputFile}");
        if (options.ToDatabase)
        {
            Console.WriteLine($"–ò–º–ø–æ—Ä—Ç –≤ –ë–î: –î–∞");
            if (options.Truncate)
                Console.WriteLine($"–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü: –î–∞");
        }
        Console.WriteLine();

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        var services = new ServiceCollection();

        // –î–æ–±–∞–≤–ª—è–µ–º MediatR
        services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(typeof(Autopark.UseCases.BrandModel.Commands.Create.CreateBrandModelCommand).Assembly));

        // –î–æ–±–∞–≤–ª—è–µ–º Infrastructure –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ –ë–î
        if (options.ToDatabase)
        {
            if (string.IsNullOrWhiteSpace(options.ConnectionString))
            {
                Console.WriteLine("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (--connection)");
                return;
            }

            services.AddInfrastructure(options.ConnectionString);
        }

        var serviceProvider = services.BuildServiceProvider();
        var mediator = serviceProvider.GetRequiredService<IMediator>();

        var generator = new DataGeneratorService(options.Seed, mediator);

        Console.WriteLine("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...");
        var data = generator.GenerateData(options);

        Console.WriteLine("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª...");
        generator.SaveToFile(data, options.OutputFile);

        if (options.ToDatabase)
        {
            Console.WriteLine("üóÑÔ∏è  –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
            await generator.ImportToDatabaseAsync(data, options);
        }

        var totalVehicles = data.Enterprises.Sum(e => e.Vehicles.Count);
        var totalDrivers = data.Enterprises.Sum(e => e.Drivers.Count);
        var vehiclesWithDrivers = data.Enterprises.Sum(e => e.Vehicles.Count(v => v.ActiveDriverId != null));

        Console.WriteLine();
        Console.WriteLine("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        Console.WriteLine($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        Console.WriteLine($"   –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π: {data.Enterprises.Count}");
        Console.WriteLine($"   –ú–∞—à–∏–Ω: {totalVehicles}");
        Console.WriteLine($"   –í–æ–¥–∏—Ç–µ–ª–µ–π: {totalDrivers}");
        Console.WriteLine($"   –ú–∞—à–∏–Ω —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏: {vehiclesWithDrivers}");
        Console.WriteLine($"   –ë—Ä–µ–Ω–¥–æ–≤/–º–æ–¥–µ–ª–µ–π: {data.BrandModels.Count}");
        Console.WriteLine($"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.Users.Count}");
        Console.WriteLine($"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {Path.GetFullPath(options.OutputFile)}");
    }
}